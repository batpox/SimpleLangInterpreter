//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SimpleLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SimpleLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, ID=29, INT=30, REAL=31, STRING=32, 
		BOOL=33, WS=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "ID", "INT", "REAL", "STRING", "BOOL", "WS"
	};


	public SimpleLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Class'", "'{'", "'}'", "';'", "'['", "']'", "'='", "'('", "')'", 
		"'int'", "'real'", "'string'", "'BOOL'", "','", "'if'", "'else'", "'+'", 
		"'-'", "'*'", "'/'", "'!'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ID", "INT", "REAL", "STRING", "BOOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,200,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,0,
		1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
		8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
		21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
		26,1,27,1,27,1,28,1,28,5,28,153,8,28,10,28,12,28,156,9,28,1,29,4,29,159,
		8,29,11,29,12,29,160,1,30,4,30,164,8,30,11,30,12,30,165,1,30,1,30,4,30,
		170,8,30,11,30,12,30,171,1,31,1,31,5,31,176,8,31,10,31,12,31,179,9,31,
		1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,192,8,32,1,
		33,4,33,195,8,33,11,33,12,33,196,1,33,1,33,1,177,0,34,1,1,3,2,5,3,7,4,
		9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,206,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,
		0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,
		85,1,0,0,0,15,87,1,0,0,0,17,89,1,0,0,0,19,91,1,0,0,0,21,95,1,0,0,0,23,
		100,1,0,0,0,25,107,1,0,0,0,27,112,1,0,0,0,29,114,1,0,0,0,31,117,1,0,0,
		0,33,122,1,0,0,0,35,124,1,0,0,0,37,126,1,0,0,0,39,128,1,0,0,0,41,130,1,
		0,0,0,43,132,1,0,0,0,45,134,1,0,0,0,47,136,1,0,0,0,49,139,1,0,0,0,51,142,
		1,0,0,0,53,145,1,0,0,0,55,148,1,0,0,0,57,150,1,0,0,0,59,158,1,0,0,0,61,
		163,1,0,0,0,63,173,1,0,0,0,65,191,1,0,0,0,67,194,1,0,0,0,69,70,5,67,0,
		0,70,71,5,108,0,0,71,72,5,97,0,0,72,73,5,115,0,0,73,74,5,115,0,0,74,2,
		1,0,0,0,75,76,5,123,0,0,76,4,1,0,0,0,77,78,5,125,0,0,78,6,1,0,0,0,79,80,
		5,59,0,0,80,8,1,0,0,0,81,82,5,91,0,0,82,10,1,0,0,0,83,84,5,93,0,0,84,12,
		1,0,0,0,85,86,5,61,0,0,86,14,1,0,0,0,87,88,5,40,0,0,88,16,1,0,0,0,89,90,
		5,41,0,0,90,18,1,0,0,0,91,92,5,105,0,0,92,93,5,110,0,0,93,94,5,116,0,0,
		94,20,1,0,0,0,95,96,5,114,0,0,96,97,5,101,0,0,97,98,5,97,0,0,98,99,5,108,
		0,0,99,22,1,0,0,0,100,101,5,115,0,0,101,102,5,116,0,0,102,103,5,114,0,
		0,103,104,5,105,0,0,104,105,5,110,0,0,105,106,5,103,0,0,106,24,1,0,0,0,
		107,108,5,66,0,0,108,109,5,79,0,0,109,110,5,79,0,0,110,111,5,76,0,0,111,
		26,1,0,0,0,112,113,5,44,0,0,113,28,1,0,0,0,114,115,5,105,0,0,115,116,5,
		102,0,0,116,30,1,0,0,0,117,118,5,101,0,0,118,119,5,108,0,0,119,120,5,115,
		0,0,120,121,5,101,0,0,121,32,1,0,0,0,122,123,5,43,0,0,123,34,1,0,0,0,124,
		125,5,45,0,0,125,36,1,0,0,0,126,127,5,42,0,0,127,38,1,0,0,0,128,129,5,
		47,0,0,129,40,1,0,0,0,130,131,5,33,0,0,131,42,1,0,0,0,132,133,5,62,0,0,
		133,44,1,0,0,0,134,135,5,60,0,0,135,46,1,0,0,0,136,137,5,62,0,0,137,138,
		5,61,0,0,138,48,1,0,0,0,139,140,5,60,0,0,140,141,5,61,0,0,141,50,1,0,0,
		0,142,143,5,61,0,0,143,144,5,61,0,0,144,52,1,0,0,0,145,146,5,33,0,0,146,
		147,5,61,0,0,147,54,1,0,0,0,148,149,5,46,0,0,149,56,1,0,0,0,150,154,7,
		0,0,0,151,153,7,1,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,
		154,155,1,0,0,0,155,58,1,0,0,0,156,154,1,0,0,0,157,159,7,2,0,0,158,157,
		1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,60,1,0,0,0,
		162,164,7,2,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,
		1,0,0,0,166,167,1,0,0,0,167,169,5,46,0,0,168,170,7,2,0,0,169,168,1,0,0,
		0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,62,1,0,0,0,173,177,
		5,34,0,0,174,176,9,0,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,178,1,0,0,
		0,177,175,1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,5,34,0,0,181,
		64,1,0,0,0,182,183,5,116,0,0,183,184,5,114,0,0,184,185,5,117,0,0,185,192,
		5,101,0,0,186,187,5,102,0,0,187,188,5,97,0,0,188,189,5,108,0,0,189,190,
		5,115,0,0,190,192,5,101,0,0,191,182,1,0,0,0,191,186,1,0,0,0,192,66,1,0,
		0,0,193,195,7,3,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,
		197,1,0,0,0,197,198,1,0,0,0,198,199,6,33,0,0,199,68,1,0,0,0,8,0,154,160,
		165,171,177,191,196,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
