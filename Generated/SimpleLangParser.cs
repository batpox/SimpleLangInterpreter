//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SimpleLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SimpleLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, ID=19, INT=20, REAL=21, STRING=22, WS=23;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_varDecl = 2, RULE_assign = 3, RULE_type = 4, 
		RULE_dimensions = 5, RULE_methodDecl = 6, RULE_argList = 7, RULE_block = 8, 
		RULE_classDecl = 9, RULE_classVarDecl = 10, RULE_expr = 11, RULE_varRef = 12;
	public static readonly string[] ruleNames = {
		"prog", "stat", "varDecl", "assign", "type", "dimensions", "methodDecl", 
		"argList", "block", "classDecl", "classVarDecl", "expr", "varRef"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'int'", "'real'", "'string'", "'['", "']'", "','", 
		"'('", "')'", "'{'", "'}'", "'class'", "'*'", "'/'", "'+'", "'-'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "ID", "INT", "REAL", "STRING", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26;
				stat();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7873080L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl() {
			return GetRuleContext<MethodDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31;
				varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 33;
				expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 34;
				methodDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 35;
				classDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			type();
			State = 39;
			Match(ID);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 40;
				Match(T__0);
				State = 41;
				expr(0);
				}
			}

			State = 44;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 6, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			varRef();
			State = 47;
			Match(T__0);
			State = 48;
			expr(0);
			State = 49;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DimensionsContext dimensions() {
			return GetRuleContext<DimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				Match(T__4);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				Match(T__2);
				State = 55;
				Match(T__5);
				State = 56;
				dimensions();
				State = 57;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 59;
				Match(T__3);
				State = 60;
				Match(T__5);
				State = 61;
				dimensions();
				State = 62;
				Match(T__6);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 64;
				Match(T__4);
				State = 65;
				Match(T__5);
				State = 66;
				dimensions();
				State = 67;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 69;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SimpleLangParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SimpleLangParser.INT, i);
		}
		public DimensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitDimensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionsContext dimensions() {
		DimensionsContext _localctx = new DimensionsContext(Context, State);
		EnterRule(_localctx, 10, RULE_dimensions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(INT);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 73;
				Match(T__7);
				State = 74;
				Match(INT);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			type();
			State = 81;
			Match(ID);
			State = 82;
			Match(T__8);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 524344L) != 0)) {
				{
				State = 83;
				argList();
				}
			}

			State = 86;
			Match(T__9);
			State = 87;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SimpleLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SimpleLangParser.ID, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 14, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			type();
			State = 90;
			Match(ID);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 91;
				Match(T__7);
				State = 92;
				type();
				State = 93;
				Match(ID);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__10);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7873080L) != 0)) {
				{
				{
				State = 101;
				stat();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassVarDeclContext[] classVarDecl() {
			return GetRuleContexts<ClassVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassVarDeclContext classVarDecl(int i) {
			return GetRuleContext<ClassVarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__12);
			State = 110;
			Match(ID);
			State = 111;
			Match(T__10);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 524344L) != 0)) {
				{
				{
				State = 112;
				classVarDecl();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		public ClassVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterClassVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitClassVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassVarDeclContext classVarDecl() {
		ClassVarDeclContext _localctx = new ClassVarDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_classVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			type();
			State = 121;
			Match(ID);
			State = 122;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SimpleLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(SimpleLangParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SimpleLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 125;
				varRef();
				}
				break;
			case 2:
				{
				State = 126;
				Match(INT);
				}
				break;
			case 3:
				{
				State = 127;
				Match(REAL);
				}
				break;
			case 4:
				{
				State = 128;
				Match(STRING);
				}
				break;
			case 5:
				{
				State = 129;
				varRef();
				State = 130;
				Match(T__5);
				State = 131;
				expr(0);
				State = 132;
				Match(T__6);
				}
				break;
			case 6:
				{
				State = 134;
				Match(T__8);
				State = 135;
				expr(0);
				State = 136;
				Match(T__9);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 148;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 146;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 140;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 141;
						_la = TokenStream.LA(1);
						if ( !(_la==T__13 || _la==T__14) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 142;
						expr(9);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 143;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 144;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 145;
						expr(8);
						}
						break;
					}
					} 
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SimpleLangParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SimpleLangParser.ID, i);
		}
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitVarRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLangVisitor<TResult> typedVisitor = visitor as ISimpleLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 24, RULE_varRef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(ID);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 152;
					Match(T__17);
					State = 153;
					Match(ID);
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,23,160,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,4,0,28,8,0,11,0,
		12,0,29,1,1,1,1,1,1,1,1,1,1,3,1,37,8,1,1,2,1,2,1,2,1,2,3,2,43,8,2,1,2,
		1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,71,8,4,1,5,1,5,1,5,5,5,76,8,5,10,5,12,
		5,79,9,5,1,6,1,6,1,6,1,6,3,6,85,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,5,7,96,8,7,10,7,12,7,99,9,7,1,8,1,8,5,8,103,8,8,10,8,12,8,106,9,8,1,
		8,1,8,1,9,1,9,1,9,1,9,5,9,114,8,9,10,9,12,9,117,9,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,3,11,139,8,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,147,8,11,10,
		11,12,11,150,9,11,1,12,1,12,1,12,5,12,155,8,12,10,12,12,12,158,9,12,1,
		12,0,1,22,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,2,1,0,14,15,1,0,16,17,
		171,0,27,1,0,0,0,2,36,1,0,0,0,4,38,1,0,0,0,6,46,1,0,0,0,8,70,1,0,0,0,10,
		72,1,0,0,0,12,80,1,0,0,0,14,89,1,0,0,0,16,100,1,0,0,0,18,109,1,0,0,0,20,
		120,1,0,0,0,22,138,1,0,0,0,24,151,1,0,0,0,26,28,3,2,1,0,27,26,1,0,0,0,
		28,29,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,1,1,0,0,0,31,37,3,4,2,0,32,
		37,3,6,3,0,33,37,3,22,11,0,34,37,3,12,6,0,35,37,3,18,9,0,36,31,1,0,0,0,
		36,32,1,0,0,0,36,33,1,0,0,0,36,34,1,0,0,0,36,35,1,0,0,0,37,3,1,0,0,0,38,
		39,3,8,4,0,39,42,5,19,0,0,40,41,5,1,0,0,41,43,3,22,11,0,42,40,1,0,0,0,
		42,43,1,0,0,0,43,44,1,0,0,0,44,45,5,2,0,0,45,5,1,0,0,0,46,47,3,24,12,0,
		47,48,5,1,0,0,48,49,3,22,11,0,49,50,5,2,0,0,50,7,1,0,0,0,51,71,5,3,0,0,
		52,71,5,4,0,0,53,71,5,5,0,0,54,55,5,3,0,0,55,56,5,6,0,0,56,57,3,10,5,0,
		57,58,5,7,0,0,58,71,1,0,0,0,59,60,5,4,0,0,60,61,5,6,0,0,61,62,3,10,5,0,
		62,63,5,7,0,0,63,71,1,0,0,0,64,65,5,5,0,0,65,66,5,6,0,0,66,67,3,10,5,0,
		67,68,5,7,0,0,68,71,1,0,0,0,69,71,5,19,0,0,70,51,1,0,0,0,70,52,1,0,0,0,
		70,53,1,0,0,0,70,54,1,0,0,0,70,59,1,0,0,0,70,64,1,0,0,0,70,69,1,0,0,0,
		71,9,1,0,0,0,72,77,5,20,0,0,73,74,5,8,0,0,74,76,5,20,0,0,75,73,1,0,0,0,
		76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,11,1,0,0,0,79,77,1,0,0,0,
		80,81,3,8,4,0,81,82,5,19,0,0,82,84,5,9,0,0,83,85,3,14,7,0,84,83,1,0,0,
		0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,5,10,0,0,87,88,3,16,8,0,88,13,1,0,
		0,0,89,90,3,8,4,0,90,97,5,19,0,0,91,92,5,8,0,0,92,93,3,8,4,0,93,94,5,19,
		0,0,94,96,1,0,0,0,95,91,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,
		0,0,98,15,1,0,0,0,99,97,1,0,0,0,100,104,5,11,0,0,101,103,3,2,1,0,102,101,
		1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,
		0,106,104,1,0,0,0,107,108,5,12,0,0,108,17,1,0,0,0,109,110,5,13,0,0,110,
		111,5,19,0,0,111,115,5,11,0,0,112,114,3,20,10,0,113,112,1,0,0,0,114,117,
		1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,117,115,1,0,0,
		0,118,119,5,12,0,0,119,19,1,0,0,0,120,121,3,8,4,0,121,122,5,19,0,0,122,
		123,5,2,0,0,123,21,1,0,0,0,124,125,6,11,-1,0,125,139,3,24,12,0,126,139,
		5,20,0,0,127,139,5,21,0,0,128,139,5,22,0,0,129,130,3,24,12,0,130,131,5,
		6,0,0,131,132,3,22,11,0,132,133,5,7,0,0,133,139,1,0,0,0,134,135,5,9,0,
		0,135,136,3,22,11,0,136,137,5,10,0,0,137,139,1,0,0,0,138,124,1,0,0,0,138,
		126,1,0,0,0,138,127,1,0,0,0,138,128,1,0,0,0,138,129,1,0,0,0,138,134,1,
		0,0,0,139,148,1,0,0,0,140,141,10,8,0,0,141,142,7,0,0,0,142,147,3,22,11,
		9,143,144,10,7,0,0,144,145,7,1,0,0,145,147,3,22,11,8,146,140,1,0,0,0,146,
		143,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,23,1,0,
		0,0,150,148,1,0,0,0,151,156,5,19,0,0,152,153,5,18,0,0,153,155,5,19,0,0,
		154,152,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,25,
		1,0,0,0,158,156,1,0,0,0,13,29,36,42,70,77,84,97,104,115,138,146,148,156
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
